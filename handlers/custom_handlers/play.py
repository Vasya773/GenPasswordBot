from loader import bot
from database.common.models import Game
import random
from keyboards.reply.start_reply import gen_markup
from telebot.types import ReplyKeyboardRemove


@bot.message_handler(func=lambda message: message.text == '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ üéÆ')
def guess_number(message) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'."""

    number_to_guess = random.randint(1, 100)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
    Game.create(user_id=message.chat.id, number=number_to_guess, attempts=0)
    bot.reply_to(message, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å –µ–≥–æ!\n\n"
                          "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –≤–≤–µ–¥–∏—Ç–µ '0'", reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=['play'])
def guess_number(message) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'."""

    number_to_guess = random.randint(1, 100)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
    Game.create(user_id=message.chat.id, number=number_to_guess, attempts=0)
    bot.reply_to(message, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å –µ–≥–æ!\n\n"
                          "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –≤–≤–µ–¥–∏—Ç–µ '0'", reply_markup=ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä—ã
@bot.message_handler(func=lambda message: Game.select().where(Game.user_id == message.chat.id).exists(),
                     content_types=['text'])
def check_number(message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞."""

    try:
        guess = int(message.text)
        game = Game.get(Game.user_id == message.chat.id)

        if guess == 0:
            bot.reply_to(message, f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n"
                                  f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {game.attempts}", reply_markup=gen_markup())
            game.delete_instance()  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
            return

        elif guess < 1 or guess > 100:
            bot.reply_to(message, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        game.attempts += 1
        game.save()

        if guess < game.number:
            bot.reply_to(message, "–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        elif guess > game.number:
            bot.reply_to(message, "–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.reply_to(message, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {game.number} –∑–∞ {game.attempts} –ø–æ–ø—ã—Ç–æ–∫.",
                         reply_markup=gen_markup())
            game.delete_instance()
            return

    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
