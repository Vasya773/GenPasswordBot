from loader import bot
from telebot.types import Message
from api.core import get_request
from database.common.models import Password
from api.core import logger
from keyboards.reply.start_reply import gen_markup


@bot.message_handler(func=lambda message: message.text == '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è üîë')
def gen_password(message):
    try:
        password_str = get_request(12)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        new_password = Password.create(password=password_str, user_id=message.chat.id)
        new_password.save()
        bot.reply_to(message, f'–í–∞—à —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password_str}', reply_markup=gen_markup())
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞: {str(e)}')
        bot.reply_to(message, f'–û—à–∏–±–∫–∞: {str(e)}')


@bot.message_handler(commands=['generate'])
def generate(message: Message) -> None:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        length = int(message.text.split()[1])
        if length < 12:
            bot.reply_to(message, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤.')
        else:
            password_str = get_request(length)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            new_password = Password.create(password=password_str, user_id=message.chat.id)
            new_password.save()
            bot.reply_to(message, f'–í–∞—à —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password_str}', reply_markup=gen_markup())
    except IndexError:
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate <–¥–ª–∏–Ω–∞>.')
    except ValueError:
        bot.reply_to(message, '–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞: {str(e)}')
        bot.reply_to(message, f'–û—à–∏–±–∫–∞: {str(e)}')
